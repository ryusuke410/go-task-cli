version: '3'

tasks:
  build:
    desc: build
    deps:
      - clean
    cmds:
      - npm exec -- tsup ./src/install.ts --out-dir ./build --config ./tsconfig.json --no-external --external @ryusuke410/go-task-cli
  clean:
    desc: clean
    cmds:
      - rm -rf ./build
  build-and-pack:
    desc: build and pack
    deps:
      - build
    cmds:
      - npm exec -- tsx scripts/pack.ts
  build-and-pack-with-version:
    desc: build and pack with specific version
    preconditions:
      - sh: test -n "{{.CLI_ARGS}}"
        msg: "Error: No version provided"
    deps:
      - build
    cmds:
      - npm exec -- tsx scripts/pack.ts --version-override {{.CLI_ARGS}}
  run-tests:
    desc: run tests
    deps:
      - build-and-pack
      - init-tests-work-space
    vars:
      testsWorkSpace: './tests-work-space'
    cmds:
      - cp -r ./tests/go-task-cli-test {{.testsWorkSpace}}/
      - cp -r ./tests/go-task-cli-test {{.testsWorkSpace}}/go-task-cli-test-bun
      - task: run-tests-body
      - task: run-tests-body-bun
  publish:
    desc: publish
    deps:
      - build
    cmds:
      - npm exec -- tsx scripts/publish.ts
  publish-with-version:
    desc: publish with specific version
    preconditions:
      - sh: test -n "{{.CLI_ARGS}}"
        msg: "Error: No version provided"
    deps:
      - build
    cmds:
      - npm exec -- tsx scripts/publish.ts --version-override {{.CLI_ARGS}}
  link:
    desc: link this package
    vars:
      releasesDir: './releases'
      packageJsonText:
        sh: cat '{{.TASKFILE_DIR}}/package.json'
      packageVersion: '{{(mustFromJson .packageJsonText).version}}'
      packageTarGz: '{{.TASKFILE_DIR}}/{{.releasesDir}}/ryusuke410-go-task-cli-{{.packageVersion}}.tgz'
    dir: '{{.releasesDir}}'
    cmds:
      - rm -rf package
      - tar -xf {{.packageTarGz}}
      - task: link-internal
  unlink:
    desc: unlink this package
    vars:
      releasesDir: './releases'
    preconditions:
      - sh: "[ -d '{{.releasesDir}}/package' ]"
    cmds:
      - task: unlink-internal

  run-tests-body:
    internal: true
    silent: true
    vars:
      testsWorkSpace: './tests-work-space'
      packageJsonText:
        sh: cat '{{.TASKFILE_DIR}}/package.json'
      packageVersion: '{{(mustFromJson .packageJsonText).version}}'
      packageTarGz: '{{.TASKFILE_DIR}}/{{.releasesDir}}/ryusuke410-go-task-cli-{{.packageVersion}}.tgz'
    dir: '{{.testsWorkSpace}}/go-task-cli-test'
    cmds:
      - npm install
      - npm install --save-dev "{{.packageTarGz}}"
      - npx task --version
  run-tests-body-bun:
    internal: true
    silent: true
    vars:
      testsWorkSpace: './tests-work-space'
      packageJsonText:
        sh: cat '{{.TASKFILE_DIR}}/package.json'
      packageVersion: '{{(mustFromJson .packageJsonText).version}}'
      packageTarGz: '{{.TASKFILE_DIR}}/{{.releasesDir}}/ryusuke410-go-task-cli-{{.packageVersion}}.tgz'
    dir: '{{.testsWorkSpace}}/go-task-cli-test-bun'
    cmds:
      - bun run --bun bun install
      - bun run --bun bun add --dev "{{.packageTarGz}}"
      - bun run --bun bun pm trust @ryusuke410/go-task-cli
      - bun run --bun bun install
      - bun run --bun bun run task --version
  init-tests-work-space:
    internal: true
    silent: true
    vars:
      testsWorkSpace: './tests-work-space'
    cmds:
      - rm -rf {{.testsWorkSpace}}
      - mkdir -p {{.testsWorkSpace}}
  link-internal:
    internal: true
    silent: true
    vars:
      releasesDir: './releases'
    dir: '{{.releasesDir}}/package'
    cmds:
      - npm unlink @ryusuke410/go-task-cli
      - npm link @ryusuke410/go-task-cli
      - bun unlink
      - bun link
  unlink-internal:
    internal: true
    silent: true
    vars:
      releasesDir: './releases'
    dir: '{{.releasesDir}}/package'
    cmds:
      - npm unlink @ryusuke410/go-task-cli
      - bun unlink
